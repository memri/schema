#
#  WARNING: THIS FILE IS AUTOGENERATED; DO NOT CHANGE.
#  Visit https://gitlab.memri.io/memri/schema to learn more.
#
#  schema.py
#
#  Copyright Â© 2020 memri. All rights reserved.
#


# Item is the baseclass for all of the data classes.
class Item:
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, allEdges, changelog, label):
        self.dateAccessed = dateAccessed
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.deleted = deleted
        self.externalId = externalId
        self.itemDescription = itemDescription
        self.starred = starred
        self.version = version
        self.uid = uid
        self.allEdges = allEdges
        self.changelog = changelog
        self.label = label
        self.edges = allEdges + changelog + label

    def __getattribute__(self, name, edge):
        res = self._meta[name]
        if isinstance(res, edge):
            return res.traverse()
        else:
            return res

    def get_edge(self, name):
        return self._meta[name]


# An account, typically for an online service, for instance an Apple account.
class Account(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, displayName, nameQuality, enablePresence, enableReceipts, service, allEdges,
                 changelog, label, belongsTo):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.displayName = displayName
        self.nameQuality = nameQuality
        self.enablePresence = enablePresence
        self.enableReceipts = enableReceipts
        self.service = service
        self.belongsTo = belongsTo
        self.edges = allEdges + changelog + label + belongsTo

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        displayName = json.get("displayName", None)
        nameQuality = json.get("nameQuality", None)
        enablePresence = json.get("enablePresence", None)
        enableReceipts = json.get("enableReceipts", None)
        service = json.get("service", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("belongsTo", None) is not None: belongsTo = Edge.from_json(json.get("belongsTo", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, displayName, nameQuality, enablePresence, enableReceipts, service, allEdges, changelog, label,
            belongsTo)


# TBD
class AuditItem(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, date, content, action, allEdges, changelog, label, appliesTo):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.date = date
        self.content = content
        self.action = action
        self.appliesTo = appliesTo
        self.edges = allEdges + changelog + label + appliesTo

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        date = json.get("date", None)
        content = json.get("content", None)
        action = json.get("action", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("appliesTo", None) is not None: appliesTo = Edge.from_json(json.get("appliesTo", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, date, content, action, allEdges, changelog, label, appliesTo)


# TBD
class CVUStoredDefinition(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, definition, domain, name, query, selector, type, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.definition = definition
        self.domain = domain
        self.name = name
        self.query = query
        self.selector = selector
        self.type = type
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        definition = json.get("definition", None)
        domain = json.get("domain", None)
        name = json.get("name", None)
        query = json.get("query", None)
        selector = json.get("selector", None)
        type = json.get("type", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, definition, domain, name, query, selector, type, allEdges, changelog, label)


# A business corporation.
class Company(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, type, name, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.type = type
        self.name = name
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        type = json.get("type", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, type, name, allEdges, changelog, label)


# The most generic kind of creative work, including books, movies, photographs, software programs,
# etc.
class CreativeWork(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, abstract, datePublished, keyword, text, allEdges, changelog, label,
                 associatedMedia, audio, citation, contentLocation, locationCreated, video, writtenBy):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.abstract = abstract
        self.datePublished = datePublished
        self.keyword = keyword
        self.text = text
        self.associatedMedia = associatedMedia
        self.audio = audio
        self.citation = citation
        self.contentLocation = contentLocation
        self.locationCreated = locationCreated
        self.video = video
        self.writtenBy = writtenBy
        self.edges = allEdges + changelog + label + associatedMedia + audio + citation + contentLocation + \
            locationCreated + video + writtenBy

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        abstract = json.get("abstract", None)
        datePublished = json.get("datePublished", None)
        keyword = json.get("keyword", None)
        text = json.get("text", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("associatedMedia", None) is not None: associatedMedia = Edge.from_json(json.get("associatedMedia", None))
        if json.get("audio", None) is not None: audio = Edge.from_json(json.get("audio", None))
        if json.get("citation", None) is not None: citation = Edge.from_json(json.get("citation", None))
        if json.get("contentLocation", None) is not None: contentLocation = Edge.from_json(json.get("contentLocation", None))
        if json.get("locationCreated", None) is not None: locationCreated = Edge.from_json(json.get("locationCreated", None))
        if json.get("video", None) is not None: video = Edge.from_json(json.get("video", None))
        if json.get("writtenBy", None) is not None: writtenBy = Edge.from_json(json.get("writtenBy", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, abstract, datePublished, keyword, text, allEdges, changelog, label, associatedMedia, audio,
            citation, contentLocation, locationCreated, video, writtenBy)


# An electronic file or document.
class DigitalDocument(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, abstract, datePublished, keyword, text, allEdges, changelog, label,
                 associatedMedia, audio, citation, contentLocation, locationCreated, video, writtenBy):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.abstract = abstract
        self.datePublished = datePublished
        self.keyword = keyword
        self.text = text
        self.associatedMedia = associatedMedia
        self.audio = audio
        self.citation = citation
        self.contentLocation = contentLocation
        self.locationCreated = locationCreated
        self.video = video
        self.writtenBy = writtenBy
        self.edges = allEdges + changelog + label + associatedMedia + audio + citation + contentLocation + \
            locationCreated + video + writtenBy

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        abstract = json.get("abstract", None)
        datePublished = json.get("datePublished", None)
        keyword = json.get("keyword", None)
        text = json.get("text", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("associatedMedia", None) is not None: associatedMedia = Edge.from_json(json.get("associatedMedia", None))
        if json.get("audio", None) is not None: audio = Edge.from_json(json.get("audio", None))
        if json.get("citation", None) is not None: citation = Edge.from_json(json.get("citation", None))
        if json.get("contentLocation", None) is not None: contentLocation = Edge.from_json(json.get("contentLocation", None))
        if json.get("locationCreated", None) is not None: locationCreated = Edge.from_json(json.get("locationCreated", None))
        if json.get("video", None) is not None: video = Edge.from_json(json.get("video", None))
        if json.get("writtenBy", None) is not None: writtenBy = Edge.from_json(json.get("writtenBy", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, abstract, datePublished, keyword, text, allEdges, changelog, label, associatedMedia, audio,
            citation, contentLocation, locationCreated, video, writtenBy)


# A comment.
class Comment(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, abstract, datePublished, keyword, text, content, textContent, allEdges,
                 changelog, label, associatedMedia, audio, citation, contentLocation, locationCreated, video,
                 writtenBy):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.abstract = abstract
        self.datePublished = datePublished
        self.keyword = keyword
        self.text = text
        self.content = content
        self.textContent = textContent
        self.associatedMedia = associatedMedia
        self.audio = audio
        self.citation = citation
        self.contentLocation = contentLocation
        self.locationCreated = locationCreated
        self.video = video
        self.writtenBy = writtenBy
        self.edges = allEdges + changelog + label + associatedMedia + audio + citation + contentLocation + \
            locationCreated + video + writtenBy

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        abstract = json.get("abstract", None)
        datePublished = json.get("datePublished", None)
        keyword = json.get("keyword", None)
        text = json.get("text", None)
        content = json.get("content", None)
        textContent = json.get("textContent", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("associatedMedia", None) is not None: associatedMedia = Edge.from_json(json.get("associatedMedia", None))
        if json.get("audio", None) is not None: audio = Edge.from_json(json.get("audio", None))
        if json.get("citation", None) is not None: citation = Edge.from_json(json.get("citation", None))
        if json.get("contentLocation", None) is not None: contentLocation = Edge.from_json(json.get("contentLocation", None))
        if json.get("locationCreated", None) is not None: locationCreated = Edge.from_json(json.get("locationCreated", None))
        if json.get("video", None) is not None: video = Edge.from_json(json.get("video", None))
        if json.get("writtenBy", None) is not None: writtenBy = Edge.from_json(json.get("writtenBy", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, abstract, datePublished, keyword, text, content, textContent, allEdges, changelog, label,
            associatedMedia, audio, citation, contentLocation, locationCreated, video, writtenBy)


# A single message.
class Message(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, abstract, datePublished, keyword, text, textContent, content, type,
                 importJson, subject, datetimeSent, allEdges, changelog, label, associatedMedia, audio, citation,
                 contentLocation, locationCreated, video, writtenBy, messageChannel, sender, receiver, cc, replyTo):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.abstract = abstract
        self.datePublished = datePublished
        self.keyword = keyword
        self.text = text
        self.textContent = textContent
        self.content = content
        self.type = type
        self.importJson = importJson
        self.subject = subject
        self.datetimeSent = datetimeSent
        self.associatedMedia = associatedMedia
        self.audio = audio
        self.citation = citation
        self.contentLocation = contentLocation
        self.locationCreated = locationCreated
        self.video = video
        self.writtenBy = writtenBy
        self.messageChannel = messageChannel
        self.sender = sender
        self.receiver = receiver
        self.cc = cc
        self.replyTo = replyTo
        self.edges = allEdges + changelog + label + associatedMedia + audio + citation + contentLocation + \
            locationCreated + video + writtenBy + messageChannel + sender + receiver + cc + replyTo

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        abstract = json.get("abstract", None)
        datePublished = json.get("datePublished", None)
        keyword = json.get("keyword", None)
        text = json.get("text", None)
        textContent = json.get("textContent", None)
        content = json.get("content", None)
        type = json.get("type", None)
        importJson = json.get("importJson", None)
        subject = json.get("subject", None)
        datetimeSent = json.get("datetimeSent", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("associatedMedia", None) is not None: associatedMedia = Edge.from_json(json.get("associatedMedia", None))
        if json.get("audio", None) is not None: audio = Edge.from_json(json.get("audio", None))
        if json.get("citation", None) is not None: citation = Edge.from_json(json.get("citation", None))
        if json.get("contentLocation", None) is not None: contentLocation = Edge.from_json(json.get("contentLocation", None))
        if json.get("locationCreated", None) is not None: locationCreated = Edge.from_json(json.get("locationCreated", None))
        if json.get("video", None) is not None: video = Edge.from_json(json.get("video", None))
        if json.get("writtenBy", None) is not None: writtenBy = Edge.from_json(json.get("writtenBy", None))
        if json.get("messageChannel", None) is not None: messageChannel = Edge.from_json(json.get("messageChannel", None))
        if json.get("sender", None) is not None: sender = Edge.from_json(json.get("sender", None))
        if json.get("receiver", None) is not None: receiver = Edge.from_json(json.get("receiver", None))
        if json.get("cc", None) is not None: cc = Edge.from_json(json.get("cc", None))
        if json.get("replyTo", None) is not None: replyTo = Edge.from_json(json.get("replyTo", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, abstract, datePublished, keyword, text, textContent, content, type, importJson, subject,
            datetimeSent, allEdges, changelog, label, associatedMedia, audio, citation, contentLocation,
            locationCreated, video, writtenBy, messageChannel, sender, receiver, cc, replyTo)


# A chat is a collection of messages.
class MessageChannel(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, abstract, datePublished, keyword, text, name, topic, encrypted, allEdges,
                 changelog, label, associatedMedia, audio, citation, contentLocation, locationCreated, video,
                 writtenBy, photo, receiver):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.abstract = abstract
        self.datePublished = datePublished
        self.keyword = keyword
        self.text = text
        self.name = name
        self.topic = topic
        self.encrypted = encrypted
        self.associatedMedia = associatedMedia
        self.audio = audio
        self.citation = citation
        self.contentLocation = contentLocation
        self.locationCreated = locationCreated
        self.video = video
        self.writtenBy = writtenBy
        self.photo = photo
        self.receiver = receiver
        self.edges = allEdges + changelog + label + associatedMedia + audio + citation + contentLocation + \
            locationCreated + video + writtenBy + photo + receiver

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        abstract = json.get("abstract", None)
        datePublished = json.get("datePublished", None)
        keyword = json.get("keyword", None)
        text = json.get("text", None)
        name = json.get("name", None)
        topic = json.get("topic", None)
        encrypted = json.get("encrypted", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("associatedMedia", None) is not None: associatedMedia = Edge.from_json(json.get("associatedMedia", None))
        if json.get("audio", None) is not None: audio = Edge.from_json(json.get("audio", None))
        if json.get("citation", None) is not None: citation = Edge.from_json(json.get("citation", None))
        if json.get("contentLocation", None) is not None: contentLocation = Edge.from_json(json.get("contentLocation", None))
        if json.get("locationCreated", None) is not None: locationCreated = Edge.from_json(json.get("locationCreated", None))
        if json.get("video", None) is not None: video = Edge.from_json(json.get("video", None))
        if json.get("writtenBy", None) is not None: writtenBy = Edge.from_json(json.get("writtenBy", None))
        if json.get("photo", None) is not None: photo = Edge.from_json(json.get("photo", None))
        if json.get("receiver", None) is not None: receiver = Edge.from_json(json.get("receiver", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, abstract, datePublished, keyword, text, name, topic, encrypted, allEdges, changelog, label,
            associatedMedia, audio, citation, contentLocation, locationCreated, video, writtenBy, photo,
            receiver)


# A file containing a note.
class Note(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, abstract, datePublished, keyword, text, title, content, textContent,
                 allEdges, changelog, label, associatedMedia, audio, citation, contentLocation, locationCreated,
                 video, writtenBy, comment):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.abstract = abstract
        self.datePublished = datePublished
        self.keyword = keyword
        self.text = text
        self.title = title
        self.content = content
        self.textContent = textContent
        self.associatedMedia = associatedMedia
        self.audio = audio
        self.citation = citation
        self.contentLocation = contentLocation
        self.locationCreated = locationCreated
        self.video = video
        self.writtenBy = writtenBy
        self.comment = comment
        self.edges = allEdges + changelog + label + associatedMedia + audio + citation + contentLocation + \
            locationCreated + video + writtenBy + comment

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        abstract = json.get("abstract", None)
        datePublished = json.get("datePublished", None)
        keyword = json.get("keyword", None)
        text = json.get("text", None)
        title = json.get("title", None)
        content = json.get("content", None)
        textContent = json.get("textContent", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("associatedMedia", None) is not None: associatedMedia = Edge.from_json(json.get("associatedMedia", None))
        if json.get("audio", None) is not None: audio = Edge.from_json(json.get("audio", None))
        if json.get("citation", None) is not None: citation = Edge.from_json(json.get("citation", None))
        if json.get("contentLocation", None) is not None: contentLocation = Edge.from_json(json.get("contentLocation", None))
        if json.get("locationCreated", None) is not None: locationCreated = Edge.from_json(json.get("locationCreated", None))
        if json.get("video", None) is not None: video = Edge.from_json(json.get("video", None))
        if json.get("writtenBy", None) is not None: writtenBy = Edge.from_json(json.get("writtenBy", None))
        if json.get("comment", None) is not None: comment = Edge.from_json(json.get("comment", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, abstract, datePublished, keyword, text, title, content, textContent, allEdges, changelog,
            label, associatedMedia, audio, citation, contentLocation, locationCreated, video, writtenBy, comment)


# A business corporation.
class Device(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, deviceID, make, manufacturer, model, name, dateAcquired, dateLost, allEdges,
                 changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.deviceID = deviceID
        self.make = make
        self.manufacturer = manufacturer
        self.model = model
        self.name = name
        self.dateAcquired = dateAcquired
        self.dateLost = dateLost
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        deviceID = json.get("deviceID", None)
        make = json.get("make", None)
        manufacturer = json.get("manufacturer", None)
        model = json.get("model", None)
        name = json.get("name", None)
        dateAcquired = json.get("dateAcquired", None)
        dateLost = json.get("dateLost", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, deviceID, make, manufacturer, model, name, dateAcquired, dateLost, allEdges, changelog, label)


# A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
class Diet(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, type, addition, name, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.type = type
        self.addition = addition
        self.name = name
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        type = json.get("type", None)
        addition = json.get("addition", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, type, addition, name, allEdges, changelog, label)


# A Downloader is used to download data from an external source, to be imported using an Importer.
class Downloader(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, allEdges, changelog, label)


# Any type of file that can be stored on disk.
class File(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, uri, allEdges, changelog, label, usedBy):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.uri = uri
        self.usedBy = usedBy
        self.edges = allEdges + changelog + label + usedBy

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        uri = json.get("uri", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("usedBy", None) is not None: usedBy = Edge.from_json(json.get("usedBy", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, uri, allEdges, changelog, label, usedBy)


# An Importer is used to import data from an external source to the Pod database.
class Importer(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, name, dataType, icon, bundleImage, allEdges, changelog, label, importerRun):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.name = name
        self.dataType = dataType
        self.icon = icon
        self.bundleImage = bundleImage
        self.importerRun = importerRun
        self.edges = allEdges + changelog + label + importerRun

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        name = json.get("name", None)
        dataType = json.get("dataType", None)
        icon = json.get("icon", None)
        bundleImage = json.get("bundleImage", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("importerRun", None) is not None: importerRun = Edge.from_json(json.get("importerRun", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, name, dataType, icon, bundleImage, allEdges, changelog, label, importerRun)


# A run of a certain Importer, that defines the details of the specific import.
class ImporterRun(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, name, dataType, allEdges, changelog, label, importer):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.name = name
        self.dataType = dataType
        self.importer = importer
        self.edges = allEdges + changelog + label + importer

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        name = json.get("name", None)
        dataType = json.get("dataType", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("importer", None) is not None: importer = Edge.from_json(json.get("importer", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, name, dataType, allEdges, changelog, label, importer)


# An indexer enhances your personal data by inferring facts over existing data and adding those to
# the database.
class Indexer(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, name, icon, query, bundleImage, runDestination, indexerClass, allEdges,
                 changelog, label, indexerRun):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.name = name
        self.icon = icon
        self.query = query
        self.bundleImage = bundleImage
        self.runDestination = runDestination
        self.indexerClass = indexerClass
        self.indexerRun = indexerRun
        self.edges = allEdges + changelog + label + indexerRun

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        name = json.get("name", None)
        icon = json.get("icon", None)
        query = json.get("query", None)
        bundleImage = json.get("bundleImage", None)
        runDestination = json.get("runDestination", None)
        indexerClass = json.get("indexerClass", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("indexerRun", None) is not None: indexerRun = Edge.from_json(json.get("indexerRun", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, name, icon, query, bundleImage, runDestination, indexerClass, allEdges, changelog, label,
            indexerRun)


# A run of a certain Indexer.
class IndexerRun(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, name, query, progress, targetDataType, allEdges, changelog, label, indexer):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.name = name
        self.query = query
        self.progress = progress
        self.targetDataType = targetDataType
        self.indexer = indexer
        self.edges = allEdges + changelog + label + indexer

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        name = json.get("name", None)
        query = json.get("query", None)
        progress = json.get("progress", None)
        targetDataType = json.get("targetDataType", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("indexer", None) is not None: indexer = Edge.from_json(json.get("indexer", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, name, query, progress, targetDataType, allEdges, changelog, label, indexer)


# TBD
class Label(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, color, name, allEdges, changelog, label, comment, appliesTo):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.color = color
        self.name = name
        self.comment = comment
        self.appliesTo = appliesTo
        self.edges = allEdges + changelog + label + comment + appliesTo

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        color = json.get("color", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("comment", None) is not None: comment = Edge.from_json(json.get("comment", None))
        if json.get("appliesTo", None) is not None: appliesTo = Edge.from_json(json.get("appliesTo", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, color, name, allEdges, changelog, label, comment, appliesTo)


# The location of something.
class Location(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, latitude, longitude, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.latitude = latitude
        self.longitude = longitude
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        latitude = json.get("latitude", None)
        longitude = json.get("longitude", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, latitude, longitude, allEdges, changelog, label)


# A postal address.
class Address(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, latitude, longitude, city, postalCode, state, street, type,
                 locationAutoLookupHash, allEdges, changelog, label, country, location):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.latitude = latitude
        self.longitude = longitude
        self.city = city
        self.postalCode = postalCode
        self.state = state
        self.street = street
        self.type = type
        self.locationAutoLookupHash = locationAutoLookupHash
        self.country = country
        self.location = location
        self.edges = allEdges + changelog + label + country + location

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        latitude = json.get("latitude", None)
        longitude = json.get("longitude", None)
        city = json.get("city", None)
        postalCode = json.get("postalCode", None)
        state = json.get("state", None)
        street = json.get("street", None)
        type = json.get("type", None)
        locationAutoLookupHash = json.get("locationAutoLookupHash", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("country", None) is not None: country = Edge.from_json(json.get("country", None))
        if json.get("location", None) is not None: location = Edge.from_json(json.get("location", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, latitude, longitude, city, postalCode, state, street, type, locationAutoLookupHash, allEdges,
            changelog, label, country, location)


# A country.
class Country(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, latitude, longitude, name, allEdges, changelog, label, flag, location):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.latitude = latitude
        self.longitude = longitude
        self.name = name
        self.flag = flag
        self.location = location
        self.edges = allEdges + changelog + label + flag + location

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        latitude = json.get("latitude", None)
        longitude = json.get("longitude", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("flag", None) is not None: flag = Edge.from_json(json.get("flag", None))
        if json.get("location", None) is not None: location = Edge.from_json(json.get("location", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, latitude, longitude, name, allEdges, changelog, label, flag, location)


# A media object, such as an image, video, or audio object embedded in a web page or a downloadable
# dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it
# on the same web page. For example, a page about a single song (MusicRecording) may have a music
# video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
class MediaObject(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width,
                 allEdges, changelog, label, file, includes):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.bitrate = bitrate
        self.duration = duration
        self.endTime = endTime
        self.fileLocation = fileLocation
        self.fileSize = fileSize
        self.height = height
        self.startTime = startTime
        self.width = width
        self.file = file
        self.includes = includes
        self.edges = allEdges + changelog + label + file + includes

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        bitrate = json.get("bitrate", None)
        duration = json.get("duration", None)
        endTime = json.get("endTime", None)
        fileLocation = json.get("fileLocation", None)
        fileSize = json.get("fileSize", None)
        height = json.get("height", None)
        startTime = json.get("startTime", None)
        width = json.get("width", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("file", None) is not None: file = Edge.from_json(json.get("file", None))
        if json.get("includes", None) is not None: includes = Edge.from_json(json.get("includes", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width, allEdges,
            changelog, label, file, includes)


# An audio file.
class Audio(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width,
                 caption, transcript, name, allEdges, changelog, label, file, includes):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.bitrate = bitrate
        self.duration = duration
        self.endTime = endTime
        self.fileLocation = fileLocation
        self.fileSize = fileSize
        self.height = height
        self.startTime = startTime
        self.width = width
        self.caption = caption
        self.transcript = transcript
        self.name = name
        self.file = file
        self.includes = includes
        self.edges = allEdges + changelog + label + file + includes

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        bitrate = json.get("bitrate", None)
        duration = json.get("duration", None)
        endTime = json.get("endTime", None)
        fileLocation = json.get("fileLocation", None)
        fileSize = json.get("fileSize", None)
        height = json.get("height", None)
        startTime = json.get("startTime", None)
        width = json.get("width", None)
        caption = json.get("caption", None)
        transcript = json.get("transcript", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("file", None) is not None: file = Edge.from_json(json.get("file", None))
        if json.get("includes", None) is not None: includes = Edge.from_json(json.get("includes", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width, caption,
            transcript, name, allEdges, changelog, label, file, includes)


# An image file.
class Photo(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width,
                 caption, exifData, name, allEdges, changelog, label, file, includes, thumbnail):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.bitrate = bitrate
        self.duration = duration
        self.endTime = endTime
        self.fileLocation = fileLocation
        self.fileSize = fileSize
        self.height = height
        self.startTime = startTime
        self.width = width
        self.caption = caption
        self.exifData = exifData
        self.name = name
        self.file = file
        self.includes = includes
        self.thumbnail = thumbnail
        self.edges = allEdges + changelog + label + file + includes + thumbnail

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        bitrate = json.get("bitrate", None)
        duration = json.get("duration", None)
        endTime = json.get("endTime", None)
        fileLocation = json.get("fileLocation", None)
        fileSize = json.get("fileSize", None)
        height = json.get("height", None)
        startTime = json.get("startTime", None)
        width = json.get("width", None)
        caption = json.get("caption", None)
        exifData = json.get("exifData", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("file", None) is not None: file = Edge.from_json(json.get("file", None))
        if json.get("includes", None) is not None: includes = Edge.from_json(json.get("includes", None))
        if json.get("thumbnail", None) is not None: thumbnail = Edge.from_json(json.get("thumbnail", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width, caption,
            exifData, name, allEdges, changelog, label, file, includes, thumbnail)


# A video file.
class Video(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width,
                 caption, exifData, name, allEdges, changelog, label, file, includes, thumbnail):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.bitrate = bitrate
        self.duration = duration
        self.endTime = endTime
        self.fileLocation = fileLocation
        self.fileSize = fileSize
        self.height = height
        self.startTime = startTime
        self.width = width
        self.caption = caption
        self.exifData = exifData
        self.name = name
        self.file = file
        self.includes = includes
        self.thumbnail = thumbnail
        self.edges = allEdges + changelog + label + file + includes + thumbnail

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        bitrate = json.get("bitrate", None)
        duration = json.get("duration", None)
        endTime = json.get("endTime", None)
        fileLocation = json.get("fileLocation", None)
        fileSize = json.get("fileSize", None)
        height = json.get("height", None)
        startTime = json.get("startTime", None)
        width = json.get("width", None)
        caption = json.get("caption", None)
        exifData = json.get("exifData", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("file", None) is not None: file = Edge.from_json(json.get("file", None))
        if json.get("includes", None) is not None: includes = Edge.from_json(json.get("includes", None))
        if json.get("thumbnail", None) is not None: thumbnail = Edge.from_json(json.get("thumbnail", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, bitrate, duration, endTime, fileLocation, fileSize, height, startTime, width, caption,
            exifData, name, allEdges, changelog, label, file, includes, thumbnail)


# Any condition of the human body that affects the normal functioning of a person, whether
# physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.
class MedicalCondition(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, type, name, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.type = type
        self.name = name
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        type = json.get("type", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, type, name, allEdges, changelog, label)


# TBD
class NavigationItem(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, title, sessionName, sequence, type, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.title = title
        self.sessionName = sessionName
        self.sequence = sequence
        self.type = type
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        title = json.get("title", None)
        sessionName = json.get("sessionName", None)
        sequence = json.get("sequence", None)
        type = json.get("type", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, title, sessionName, sequence, type, allEdges, changelog, label)


# An online profile, typically on social media.
class OnlineProfile(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, type, handle, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.type = type
        self.handle = handle
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        type = json.get("type", None)
        handle = json.get("handle", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, type, handle, allEdges, changelog, label)


# A person (alive, dead, undead, or fictional).
class Person(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, birthDate, email, deathDate, firstName, lastName, gender, sexualOrientation,
                 height, shoulderWidth, armLength, displayName, nameQuality, enablePresence, enableReceipts,
                 allEdges, changelog, label, address, birthPlace, deathPlace, profilePicture, relationship,
                 hasPhoneNumber, website, company, publicKey, onlineProfile, diet, medicalCondition):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.birthDate = birthDate
        self.email = email
        self.deathDate = deathDate
        self.firstName = firstName
        self.lastName = lastName
        self.gender = gender
        self.sexualOrientation = sexualOrientation
        self.height = height
        self.shoulderWidth = shoulderWidth
        self.armLength = armLength
        self.displayName = displayName
        self.nameQuality = nameQuality
        self.enablePresence = enablePresence
        self.enableReceipts = enableReceipts
        self.address = address
        self.birthPlace = birthPlace
        self.deathPlace = deathPlace
        self.profilePicture = profilePicture
        self.relationship = relationship
        self.hasPhoneNumber = hasPhoneNumber
        self.website = website
        self.company = company
        self.publicKey = publicKey
        self.onlineProfile = onlineProfile
        self.diet = diet
        self.medicalCondition = medicalCondition
        self.edges = allEdges + changelog + label + address + birthPlace + deathPlace + profilePicture + \
            relationship + hasPhoneNumber + website + company + publicKey + onlineProfile + diet + \
            medicalCondition

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        birthDate = json.get("birthDate", None)
        email = json.get("email", None)
        deathDate = json.get("deathDate", None)
        firstName = json.get("firstName", None)
        lastName = json.get("lastName", None)
        gender = json.get("gender", None)
        sexualOrientation = json.get("sexualOrientation", None)
        height = json.get("height", None)
        shoulderWidth = json.get("shoulderWidth", None)
        armLength = json.get("armLength", None)
        displayName = json.get("displayName", None)
        nameQuality = json.get("nameQuality", None)
        enablePresence = json.get("enablePresence", None)
        enableReceipts = json.get("enableReceipts", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        if json.get("address", None) is not None: address = Edge.from_json(json.get("address", None))
        if json.get("birthPlace", None) is not None: birthPlace = Edge.from_json(json.get("birthPlace", None))
        if json.get("deathPlace", None) is not None: deathPlace = Edge.from_json(json.get("deathPlace", None))
        if json.get("profilePicture", None) is not None: profilePicture = Edge.from_json(json.get("profilePicture", None))
        if json.get("relationship", None) is not None: relationship = Edge.from_json(json.get("relationship", None))
        if json.get("hasPhoneNumber", None) is not None: hasPhoneNumber = Edge.from_json(json.get("hasPhoneNumber", None))
        if json.get("website", None) is not None: website = Edge.from_json(json.get("website", None))
        if json.get("company", None) is not None: company = Edge.from_json(json.get("company", None))
        if json.get("publicKey", None) is not None: publicKey = Edge.from_json(json.get("publicKey", None))
        if json.get("onlineProfile", None) is not None: onlineProfile = Edge.from_json(json.get("onlineProfile", None))
        if json.get("diet", None) is not None: diet = Edge.from_json(json.get("diet", None))
        if json.get("medicalCondition", None) is not None: medicalCondition = Edge.from_json(json.get("medicalCondition", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, birthDate, email, deathDate, firstName, lastName, gender, sexualOrientation, height,
            shoulderWidth, armLength, displayName, nameQuality, enablePresence, enableReceipts, allEdges,
            changelog, label, address, birthPlace, deathPlace, profilePicture, relationship, hasPhoneNumber,
            website, company, publicKey, onlineProfile, diet, medicalCondition)


# A telephone number.
class PhoneNumber(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, phoneNumber, type, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.phoneNumber = phoneNumber
        self.type = type
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        phoneNumber = json.get("phoneNumber", None)
        type = json.get("type", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, phoneNumber, type, allEdges, changelog, label)


# A public key used in an asymmetric cryptography protocol.
class PublicKey(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, type, key, name, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.type = type
        self.key = key
        self.name = name
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        type = json.get("type", None)
        key = json.get("key", None)
        name = json.get("name", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, type, key, name, allEdges, changelog, label)


# TBD
class Setting(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, key, json, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.key = key
        self.json = json
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        key = json.get("key", None)
        json = json.get("json", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, key, json, allEdges, changelog, label)


# A Website is a set of related web pages and other items typically served from a single web domain
# and accessible via URLs.
class Website(Item):
    def __init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription,
                 starred, version, uid, type, url, allEdges, changelog, label):
        super().__init__(self, dateAccessed, dateCreated, dateModified, deleted, externalId,
                         itemDescription, starred, version, uid, allEdges, changelog, label)
        self.type = type
        self.url = url
        self.edges = allEdges + changelog + label

    @classmethod
    def from_json(cls, json):
        dateAccessed = json.get("dateAccessed", None)
        dateCreated = json.get("dateCreated", None)
        dateModified = json.get("dateModified", None)
        deleted = json.get("deleted", None)
        externalId = json.get("externalId", None)
        itemDescription = json.get("itemDescription", None)
        starred = json.get("starred", None)
        version = json.get("version", None)
        uid = json.get("uid", None)
        type = json.get("type", None)
        url = json.get("url", None)
       
        if json.get("allEdges", None) is not None: allEdges = Edge.from_json(json.get("allEdges", None))
        if json.get("changelog", None) is not None: changelog = Edge.from_json(json.get("changelog", None))
        if json.get("label", None) is not None: label = Edge.from_json(json.get("label", None))
        
        cls(dateAccessed, dateCreated, dateModified, deleted, externalId, itemDescription, starred, version,
            uid, type, url, allEdges, changelog, label)