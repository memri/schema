<p>
  This is the Schema used by Memri, dictating how information is stored in the database on your Pod.
</p>

<h4>Type hierarchy</h4>
<p>
  The <a href="/Type">Type hierarchy</a> defines what types of data can exist in the database, divided into primitive
  data types like strings and integers, and Items, which can have Properties and Edges. As the database is a graph
  database, Items can be be seen as nodes in the graph. The hierarchy defines how the Items are related, as they inherit
  properties and edges. This enables smart retrieval of data. For instance, to find all <i>ImageObjects</i> and
  <i>VideoObjects</i> related to some Item, we can query them using their parent Item type <i>MediaObject</i>.
</p>

<h4>Edge &#38; Property hierarchy</h4>
<p>
  The <a href="/EdgeOrProperty">Edge &#38; Property hierarchy</a> defines what Edges and Properties can exist in the database,
  what type of data they refer to, and how the Edges and Properties are related. The expected types of properties are
  primitive data types, like strings and ints, and are always one-to-one relations. Edges point to other Items, and are
  one-to-many relations. Again, we use an hierarchy to enable smart retrieval. For instance, to find all family members
  of an item of type <i>Person</i>, all Edges that are of the <i>familyRelation</i>-type can be queried, retrieving all
  its children in the Edge and Property hierarchy, including <i>mothers</i>, <i>fathers</i>, <i>sisters</i>, etc.
</p>
